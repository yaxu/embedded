import Sound.OSC.FD
import Control.Concurrent.MVar
import Data.Maybe
import System.IO.Unsafe

let start = do mp <- newMVar (silence :: Pattern Int)
               let oscport = 9000
                   listen = do s <- udpServer "127.0.0.1" oscport
                               oscLoop s
                   oscLoop s = do m <- recvMessage s
                                  act m
                                  oscLoop s
                   act (Just (Message "/notes" xs)) =
                     do putStrLn $ show xs
                        swapMVar mp $ listToPat $ catMaybes $ map (datum_integral) xs
                        return ()
                   act _ = return ()
               forkIO listen
               return $ cheat mp
    cheat mp = Pattern (\a -> unsafePerformIO $ do p <- readMVar mp
                                                   return $ arc p a
                       )

p <- start






p


d1 $ every 2 (rev . chop 8) $ jux rev $ every 2 (# up "-12") $ every 3 (slow 2) $ n (offadd 0.125 12 $ offadd 0.25 7 $ ((+24) . (+8)) <$> p) # sound "gabba"
  # cutoff (slow 4 $ scale 100 4000 sine1)
  # resonance "0.3"
  # shape "0.9"
  # gain "1.2"


cps (-1)

cps 0.5

d1 $ sometimes (# up "-12") $ every 2 (# vowel "a") $jux rev $ runWith 4 (density 2) $ chop 8 $ n "c7 e8" # sound "[jx,rash]" # gain "1"

d2 $ degradeBy 0.6 $ jux rev $ every 2 (chop 3) $ sound "bd*2 ~" # shape "0.9" # gain "1" # speed "4"

d3 $ silence -- runWith 4 (density 2) $ jux (iter 4 . rev) $ slow 2 $ n "0*2 [9 [1 4]] [2*2 6*4] [3*2 2]" # sound "funky" # gain "1.1" # speed "1.9 1.5"


d1 $ (jux rev $ runWith 4 (density 2) $ chop 16 $ sound "bd*8")
  # gain "1.3 1 1 1"
  # vowel "a [i e] o"
  # speed (slow 2 $ scale 1 2 sine1)


d2 $ jux rev $ iter 4 $ loopAt 2 $ chop 8 $ sound "arc"
  # gain "1.1"

cps (-1)

cps 0.5