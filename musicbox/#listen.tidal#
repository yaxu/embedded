import Sound.OSC.FD
import Control.Concurrent.MVar
import Data.Maybe
import System.IO.Unsafe

let start = do mp <- newMVar (silence :: Pattern Int)
               let oscport = 9000
                   listen = do s <- udpServer "127.0.0.1" oscport
                               oscLoop s
                   oscLoop s = do m <- recvMessage s
                                  act m
                                  oscLoop s
                   act (Just (Message "/notes" xs)) =
                     do putStrLn $ show xs
                        swapMVar mp $ listToPat $ catMaybes $ map (datum_integral) xs
                        return ()
                   act _ = return ()
               forkIO listen
               return $ cheat mp
    cheat mp = Pattern (\a -> unsafePerformIO $ do p <- readMVar mp
                                                   return $ arc p a
                       )

p <- start









d1 $ every 3 (slow 1.5) $ sometimes (# up "12") $  n (offadd 0.125 12 $ offadd 0.25 7 $ (+8) <$> p) # sound "rash"
  # cutoff (palindrome $ scale 300 5000 saw1)
  # resonance "0.2"






