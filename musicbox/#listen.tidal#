import Sound.OSC.FD
import Control.Concurrent.MVar
import Data.Maybe
import System.IO.Unsafe

let start = do mp <- newMVar (silence :: Pattern Int)
               let oscport = 9000
                   listen = do s <- udpServer "127.0.0.1" oscport
                               oscLoop s
                   oscLoop s = do m <- recvMessage s
                                  act m
                                  oscLoop s
                   act (Just (Message "/notes" xs)) =
                     do putStrLn $ show xs
                        swapMVar mp $ listToPat $ catMaybes $ map (datum_integral) xs
                        return ()
                   act _ = return ()
               forkIO listen
               return $ cheat mp
    cheat mp = Pattern (\a -> unsafePerformIO $ do p <- readMVar mp
                                                   return $ arc p a
                       )

p <- start






p


d1 $ every 2 (rev . chop 8) $ jux rev $ every 2 (# up "-12") $ every 3 (slow 2) $ n (offadd 0.125 12 $ offadd 0.25 7 $ ((+24) . (+8)) <$> p) # sound "gabba"
  # cutoff (slow 4 $ scale 100 4000 sine1)
  # resonance "0.3"
  # shape "0.9"
  # gain "1.2"


cps (-1)

cps 0.5

d1 $ sound "bd can can can"