import qualified Database.SQLite.Simple as S
import qualified Database.SQLite.Simple.FromRow as SFR
import Control.Concurrent.MVar

data TimeValueField = TimeValueField Double Double deriving (Show)
instance SFR.FromRow TimeValueField where fromRow = TimeValueField <$> S.field <*> S.field

sql <- S.open "tidalvalues.db"
S.execute_ sql "CREATE TABLE IF NOT EXISTS timevalue (begin DOUBLE, end DOUBLE, value DOUBLE)"
mp <- newMVar (silence :: Pattern Double)

clocked (\tempo tick ->
          do p <- readMVar mp
             let values = arc (filterOnsets p) (toRational tick, toRational (tick+1))
                    S.execute sql "INSERT INTO eval (cxid,code) VALUES (?,?)" (EvalField cxid              
             return ()
        )

swapMVar mp ("0.5 0.75")

p <- readMVar mp
arc (filterOnsets p)  (1,2)

1+1
