
let patterns = [("line",
                 (slow 2 $ off "<0.25 0.5 0.125>" (degradeBy "0 0.3" . (# (s "xx" # speed 2 # gain 0.9 # legato 1))) $ jux (rev . (|+| n "<7 7 7 7 12>")) $ off 0.25 (|+| n 7) $ n "<c7(3,8,<0 4>) a7(3,8) f7(3,8) e7(3,8)>" # sound "rash")
                ),
                ("br",
                 slow 2 $ off 0.25 (|-| n 4) $ n ((run "[8 16] <4 8 4 2>") + 7) # sound "micron"
                 # speed 2
                 # crush 3
                )
               ]
    txs = [("crash",
            degrade . (# speed (rev $ saw + 1))
           ),
           ("change",
            chunk 4 (slow 2)
           )
          ]
in
d1 $ ur' 16 "[br br:change, ~ line:crash line ~]" patterns txs

:t (>>=)

Pattern a -> (a -> Pattern b) -> Pattern b


unwrap :: Pattern (Pattern a) -> Pattern a
unwrap p = Pattern $ \a -> concatMap (\(outerWhole, outerPart, p') -> catMaybes $ map (munge outerPart) $ arc p' a) (arc p a)
  where munge a (whole,part,v) = do part' <- subArc a part
                                    return (whole, part',v)
