
d2 $ slow 2 $ every 8 (const (s "bd9(3,8)" # shape 0.9)) $ jux rev $ stut "<4 8 [16 2]>" 0.5 (-0.25) $ (|+| speed 0.4) $ sound "bd9(3,8)"
  # gain 1.3
  # speed 1

d1 $ jux rev $ chunk 4 (hurry 2) $
  off 0.25 (|+| (n "<7 12>" |+| speed 2)) $ slow 2 $ n "0 ~ [~ 3] [14 6]" # sound "jvr"
  # shape 0.7
  |*| speed "-0.5"


d3 $ off 0.25 (|*| up "<7 2 12>") $ off 0.125 (|*| n "<7>") $ never (off 0.125 (|+| n 7)) $ off 0.25 ((jux rev) . (# speed 4) . (fast 2))$ n "0 ~ [~ 9] ~" # sound "stabs"
  # hpf "<600 1000 2000>"
  # hpq (slow 16 $ scale 0.2 0.4 saw )
  # orbit 1
  # room 0.99
  # size 0.99
  -- # delay "<0.9>"
  -- # delayt "<0.01 0.02 0.1>"
  -- # delayfb 0.9
  
d4 $ off 0.25 (|*| up "<7 12 2>") $ sound "jvgabba:5(3,8,<0 2 4 6>)"
  # shape 0.8

d5 $ slow 4 $ jux (|*| speed 2) $ chunk 4 (hurry 2) $ loopAt "<1 2>" $
  striate 16 $ sound "arc*4"
  # gain 1
  # shape 0.9

d6 $ sound "~ wobble*2"
  # gain 1.1
  # speed 2

d7 $ chunk 4 (hurry 2) $ sound "[future,bd,drum,odx]*4"
  # gain 1.4

d8 $ jux rev $ sometimes (|*| speed "-1") $ loopAt 4 $ chop 8 $ sound "repetition"
  # gain 1.7
  # n (irand 8)


let br :: (ParamPattern -> IO ()) -> Time -> ParamPattern -> IO ()
    br out len pat = out $ pure (now) ~> seqP [(0,len,pat)]
    br1 = br d1

br1 4 $ sound "bd sn"

hush