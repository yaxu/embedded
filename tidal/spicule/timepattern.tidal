
instance Num a => Num (Pattern a) where
      negate      = fmap negate
      (+)         = liftA2 (+)
      (*)         = liftA2 (*)
      fromInteger = pure . fromInteger
      abs         = fmap abs
      signum      = fmap signum

instance (Fractional a) => Fractional (Pattern a) where
  fromRational = pure . fromRational
  (/) = liftA2 (/)

let density' :: Pattern Time -> Pattern b -> Pattern b
    density' tp p = unwrap $ (\tv -> density tv p) <$> tp
    slow' tp p = density' (1/tp) p
    chop' tp p = unwrap $ (\tv -> chop tv p) <$> tp



d1 $ slow' "<2 4 1>" $ every 4 (# (speed 2 # room 0.9 # size 0.9)) $ jux rev $ density' "1 2 [3 1.5]" $ sound "mt lt mt ht"
  # cutoff (every 4 (const 5000) $ (slow 8 saw1) * 400 + 500)
  # resonance (slow 4 $ tri1 * 0.2 + 0.1)
  # orbit 1

d2 $ jux ((1 <~) . (|*| speed 1.5)) $ chop' "<2 64 128 32 2>" $ density' "1 2" $ sound "drum(3,8,[0 4]/2)"
  # shape 0.8

d3 $ jux rev $ (n (off 0.125 (+12) $ off 0.25 (+7) $ slow 2 $ "<d7 g6>(3,8) ~ a6*2 d6*2") # s "<rash xx>/2")
  # shape 0.3
  # cutoff (every 2 (*2) $ saw1 * 4000 + 300)
  # resonance (every 3 (+0.2) 0.2)

d4 $ sound "gabba(3,8)"




d1 $ off' "<0.125 0.25>" (|*| end 0.1) $ runWith 4 (density 2 . (|*| speed 1.2)) $ slow 4 $ jux (rev . (# speed 1.5)) $ sound "bd ~ sn:1 ~ bd ~ sn:1 bd bd ~ sn:1 ~ cr:1 bd bd bd"
  # cutoff 1000
  # resonance 0.3
  # crush 5

d2 $ n (off 0.25 (+12) $ off 0.125 (+ "<12 7>") $ slow 2 "d6(3,8) . d7(3,8) f6*4") # sound "pulse"
  # crush "<5 4 3>"
  # cutoff (slow 4 $ saw1 * 1000 + 600)
  # resonance 0.3


let x = [("a", "bd sn ")
        ]
in
d2 $ sound (inhabit x "a a/2")
