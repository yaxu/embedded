
instance Num a => Num (Pattern a) where
      negate      = fmap negate
      (+)         = liftA2 (+)
      (*)         = liftA2 (*)
      fromInteger = pure . fromInteger
      abs         = fmap abs
      signum      = fmap signum

instance (Fractional a) => Fractional (Pattern a) where
  fromRational = pure . fromRational
  (/) = liftA2 (/)

let density' :: Pattern Time -> Pattern b -> Pattern b
    density' tp p = unwrap $ (\tv -> density tv p) <$> tp
    slow' tp p = density (1/tp) p






d1 $ every 4 (# speed 2 # room 0.8) $ jux rev $ density' "1 2 [3 1.5]" $ sound "mt lt mt ht"
  # cutoff (every 4 (const 5000) $ (slow 8 saw1) * 400 + 500)
  # resonance (slow 4 $ tri1 * 0.2 + 0.1)










